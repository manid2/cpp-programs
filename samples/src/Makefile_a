# makefile to compile single targets with long multiple options
# refer:
# https://stackoverflow.com/a/31610364/6247883

# list all targets
LGE_EXE=lge_exe
LFE_EXE=lfe_exe

TARGETS=$(LGE_EXE) $(LFE_EXE)

# list include paths for targets
LGE_EXE_INC=
LFE_EXE_INC=

# list sources for targets
LGE_EXE_SRCS=linux_gcov_env.cpp
LFE_EXE_SRCS=linux_fork_exec.cpp

# list objs for targets
LGE_EXE_OBJS=$(LGE_EXE_SRCS:.cpp=.o)
LFE_EXE_OBJS=$(LFE_EXE_SRCS:.cpp=.o)
T_OBJS=$(LGE_EXE_OBJS) $(LFE_EXE_OBJS)

# list target specific compile & linker options
GCOV_OPTS=--coverage
GPROF_OPTS=-pg
DEBUG_OPTS=-g
WARN_OPTS=-Wall

LGE_CXXFLAGS=$(LGE_EXE_INC) $(GCOV_OPTS) $(GPROF_OPTS) $(DEBUG_OPTS)
LGE_LDFLAGS=$(GCOV_OPTS) $(GPROF_OPTS) $(DEBUG_OPTS)

LFE_CXXFLAGS=
LFE_LDFLAGS=

# list compile & linker options
CXX=g++
CXXFLAGS=$(WARN_OPTS)
LDFLAGS=

GCOV_GEN_FILES=$(shell find . -name "*.gcno" -o -name "*.gcda" -type f)

# build all binaries by default
all: $(LGE_EXE) $(LFE_EXE)

# use target specific variables and append to predefined variables
# this enables building a target with its own flags
$(LGE_EXE): CXXFLAGS+=$(LGE_CXXFLAGS)
$(LGE_EXE): $(LGE_EXE_OBJS)
	$(CXX) -o $@ $(LGE_EXE_OBJS) $(CXXFLAGS) $(LDFLAGS) $(LGE_CXXFLAGS) $(LGE_LDFLAGS)

$(LFE_EXE): $(LFE_EXE_OBJS)
	$(CXX) -o $@ $(LFE_EXE_OBJS) $(CXXFLAGS) $(LDFLAGS) $(LFE_CXXFLAGS) $(LFE_LDFLAGS)

clean:
	$(RM) $(TARGETS) $(T_OBJS) $(GCOV_GEN_FILES)

.PHONY: all clean
